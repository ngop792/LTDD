import 'package:flutter/material.dart';
import 'package:note1/domain/entities/playlist.dart';

// Gi·∫£ ƒë·ªãnh class Song (gi·ªØ l·∫°i ƒë·ªÉ tr√°nh l·ªói bi√™n d·ªãch)
class Song {
  final String title;
  final String artist;
  final String imageUrl; // URL ho·∫∑c path asset

  Song({required this.title, required this.artist, required this.imageUrl});
}

// ‚ö†Ô∏è Danh s√°ch n√†y ch·ªâ l√† bi·∫øn to√†n c·ª•c r·ªóng, kh√¥ng c·∫ßn d√πng
// N·∫øu d√πng API, b·∫°n n√™n load tr·ª±c ti·∫øp v√†o _sourceSongs.
final List<Song> availableSongs = [];

class AddSongPage extends StatefulWidget {
  final Playlist playlist;

  const AddSongPage({super.key, required this.playlist});

  @override
  State<AddSongPage> createState() => _AddSongPageState();
}

class _AddSongPageState extends State<AddSongPage> {
  // Bi·∫øn tr·∫°ng th√°i ƒë·ªÉ l∆∞u danh s√°ch b√†i h√°t ƒë∆∞·ª£c t√¨m ki·∫øm/hi·ªÉn th·ªã
  List<Song> currentSongs = [];
  bool isLoading = false; // Tr·∫°ng th√°i t·∫£i d·ªØ li·ªáu

  // D·ªØ li·ªáu g·ªëc m√† √¥ t√¨m ki·∫øm s·∫Ω l·ªçc tr√™n ƒë√≥.
  // ‚úÖ ƒê√É S·ª¨A: Kh√¥ng d√πng 'final' v√† kh·ªüi t·∫°o b·∫±ng danh s√°ch r·ªóng ƒë·ªÉ c√≥ th·ªÉ g√°n l·∫°i
  List<Song> _sourceSongs = [];

  @override
  void initState() {
    super.initState();
    // ‚úÖ TH√äM: B·∫Øt ƒë·∫ßu t·∫£i d·ªØ li·ªáu khi widget ƒë∆∞·ª£c kh·ªüi t·∫°o
    _loadInitialSongs();
  }

  // ‚úÖ H√ÄM T·∫¢I D·ªÆ LI·ªÜU ƒê∆Ø·ª¢C TH√äM V√ÄO
  Future<void> _loadInitialSongs() async {
    setState(() {
      isLoading = true; // B·∫Øt ƒë·∫ßu t·∫£i, hi·ªÉn th·ªã CircularProgressIndicator
    });

    // --- PH·∫¶N G·ªåI API TH·ª∞C T·∫æ C·ª¶A B·∫†N S·∫º ·ªû ƒê√ÇY ---

    // üí° T·∫°m th·ªùi d√πng Future.delayed ƒë·ªÉ gi·∫£ l·∫≠p ƒë·ªô tr·ªÖ m·∫°ng (2 gi√¢y)
    await Future.delayed(const Duration(seconds: 2));

    // üí° D·ªØ li·ªáu m·∫´u t·∫°m th·ªùi (thay th·∫ø b·∫±ng k·∫øt qu·∫£ t·ª´ API)
    final List<Song> fetchedSongs = [
      Song(
        title: "B√†i H√°t API M·ªõi",
        artist: "Ca Sƒ© API",
        imageUrl: "assets/new_song_1.jpg",
      ),
      Song(
        title: "Nh·∫°c Hot 2024",
        artist: "Trending",
        imageUrl: "assets/new_song_2.jpg",
      ),
      Song(
        title: "ƒê√™m ƒê√† N·∫µng",
        artist: "Ai ƒê√≥",
        imageUrl: "assets/new_song_3.jpg",
      ),
    ];

    // ----------------------------------------------------

    setState(() {
      _sourceSongs = fetchedSongs; // C·∫≠p nh·∫≠t danh s√°ch g·ªëc
      currentSongs = fetchedSongs; // C·∫≠p nh·∫≠t danh s√°ch hi·ªÉn th·ªã
      isLoading = false; // K·∫øt th√∫c t·∫£i
    });
  }

  // H√†m x·ª≠ l√Ω logic t√¨m ki·∫øm v√† l·ªçc d·ªØ li·ªáu (kh√¥ng thay ƒë·ªïi)
  void _filterSongs(String query) {
    if (query.isEmpty) {
      setState(() {
        currentSongs = _sourceSongs;
      });
      return;
    }

    final filteredList = _sourceSongs.where((song) {
      final titleLower = song.title.toLowerCase();
      final artistLower = song.artist.toLowerCase();
      final searchLower = query.toLowerCase();
      return titleLower.contains(searchLower) ||
          artistLower.contains(searchLower);
    }).toList();

    setState(() {
      currentSongs = filteredList;
    });
  }

  // ... (c√°c widget _buildSearchBar, _buildTabBar, _buildSongList v√† build method kh√¥ng ƒë·ªïi)

  // --- Widget Thanh T√¨m Ki·∫øm ---
  Widget _buildSearchBar() {
    return Padding(
      padding: const EdgeInsets.symmetric(horizontal: 16.0, vertical: 8.0),
      child: Container(
        height: 40,
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(20),
        ),
        child: TextField(
          onChanged: _filterSongs,
          decoration: const InputDecoration(
            hintText: "T√¨m ki·∫øm b√†i h√°t, ngh·ªá sƒ©",
            hintStyle: TextStyle(color: Colors.grey),
            prefixIcon: Icon(Icons.search, color: Colors.grey),
            border: InputBorder.none,
            contentPadding: EdgeInsets.symmetric(vertical: 8.0),
          ),
          style: const TextStyle(color: Colors.black),
        ),
      ),
    );
  }

  // --- Widget TabBar (Gi√£n ƒë·ªÅu) ---
  Widget _buildTabBar() {
    return const Align(
      alignment: Alignment.centerLeft,
      child: TabBar(
        isScrollable: false, // Gi√£n ƒë·ªÅu c√°c tab
        indicatorColor: Colors.purple,
        labelColor: Colors.black,
        unselectedLabelColor: Colors.grey,
        labelStyle: TextStyle(fontWeight: FontWeight.bold, fontSize: 15),
        tabs: [
          Tab(text: "Online"),
          Tab(text: "C√° nh√¢n"),
          Tab(text: "G·∫ßn ƒë√¢y"),
          Tab(text: "Upload"),
        ],
      ),
    );
  }

  // --- Widget Danh s√°ch B√†i h√°t (T·ªëi ∆∞u giao di·ªán Th·∫≥ng h√†ng) ---
  Widget _buildSongList(List<Song> songs, BuildContext context) {
    if (isLoading) {
      // ‚úÖ Hi·ªÉn th·ªã loading khi d·ªØ li·ªáu ƒëang ƒë∆∞·ª£c t·∫£i
      return const Center(child: CircularProgressIndicator());
    }

    // Tr∆∞·ªùng h·ª£p 1: Danh s√°ch g·ªëc c√≥ data nh∆∞ng k·∫øt qu·∫£ l·ªçc r·ªóng
    if (songs.isEmpty && _sourceSongs.isNotEmpty) {
      return const Center(
        child: Text(
          "Kh√¥ng t√¨m th·∫•y b√†i h√°t n√†o ph√π h·ª£p v·ªõi t·ª´ kh√≥a t√¨m ki·∫øm.",
          style: TextStyle(color: Colors.grey, fontSize: 16),
        ),
      );
    }

    // Tr∆∞·ªùng h·ª£p 2: Danh s√°ch g·ªëc r·ªóng (ch∆∞a load data ho·∫∑c data API r·ªóng)
    if (songs.isEmpty && _sourceSongs.isEmpty) {
      return const Center(
        child: Text(
          "Ch∆∞a c√≥ b√†i h√°t n√†o ƒë∆∞·ª£c t·∫£i l√™n.",
          style: TextStyle(color: Colors.grey, fontSize: 16),
        ),
      );
    }

    // Ph·∫ßn hi·ªÉn th·ªã danh s√°ch b√†i h√°t v√† D·∫§U C·ªòNG
    return ListView.builder(
      itemCount: songs.length,
      padding: EdgeInsets.zero,
      itemBuilder: (context, index) {
        final song = songs[index];
        return ListTile(
          contentPadding: const EdgeInsets.symmetric(
            horizontal: 16.0,
            vertical: 4.0,
          ),

          leading: ClipRRect(
            borderRadius: BorderRadius.circular(5.0),
            child: Image.asset(
              song.imageUrl,
              width: 50,
              height: 50,
              fit: BoxFit.cover,
              errorBuilder: (context, error, stackTrace) => Container(
                width: 50,
                height: 50,
                color: Colors.grey.shade300,
                child: const Icon(Icons.music_note, color: Colors.white),
              ),
            ),
          ),

          title: Text(
            song.title,
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
            style: const TextStyle(fontWeight: FontWeight.w500),
          ),
          subtitle: Text(
            song.artist,
            maxLines: 1,
            overflow: TextOverflow.ellipsis,
          ),

          trailing: IconButton(
            icon: const Icon(
              Icons.add_circle_outline,
              color: Colors.grey,
              size: 28,
            ),
            onPressed: () {
              ScaffoldMessenger.of(context).showSnackBar(
                SnackBar(
                  content: Text(
                    'ƒê√£ th√™m "${song.title}" v√†o playlist "${widget.playlist.name}"',
                  ),
                ),
              );
            },
          ),
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return DefaultTabController(
      length: 4,
      child: Scaffold(
        backgroundColor: Colors.white,
        body: NestedScrollView(
          headerSliverBuilder: (context, innerBoxIsScrolled) {
            return <Widget>[
              SliverAppBar(
                automaticallyImplyLeading: false,
                pinned: true,
                backgroundColor: Colors.white,
                elevation: 0.5,
                centerTitle: true,
                title: const Text(
                  "Th√™m b√†i h√°t",
                  style: TextStyle(
                    color: Colors.black,
                    fontWeight: FontWeight.bold,
                  ),
                ),
                leading: IconButton(
                  icon: const Icon(Icons.close, color: Colors.black),
                  onPressed: () => Navigator.pop(context),
                ),
                bottom: PreferredSize(
                  preferredSize: const Size.fromHeight(100.0),
                  child: Column(
                    children: [
                      _buildSearchBar(),
                      _buildTabBar(),
                      const Divider(
                        height: 1,
                        thickness: 1,
                        color: Color(0xFFE0E0E0),
                      ),
                    ],
                  ),
                ),
              ),
            ];
          },
          body: TabBarView(
            children: [
              _buildSongList(currentSongs, context),
              const Center(child: Text("Danh s√°ch b√†i h√°t C√° nh√¢n")),
              const Center(child: Text("Danh s√°ch b√†i h√°t G·∫ßn ƒë√¢y")),
              const Center(child: Text("Upload nh·∫°c")),
            ],
          ),
        ),
      ),
    );
  }
}
